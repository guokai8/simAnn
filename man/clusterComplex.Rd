% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cluster_complex.R
\name{clusterComplex}
\alias{clusterComplex}
\title{Cluster Complex Analysis for Protein Complexes}
\usage{
clusterComplex(
  enrich_data,
  species = c("human", "mouse"),
  ontology_type = c("BP", "CC", "MF"),
  gene_delim = ",",
  enrich_go_col = "Annot",
  enrich_gene_col = "GeneID",
  merged_go_col = "functions_go_id",
  merged_gene_col = "subunits_gene_name",
  merged_complex_col = "ComplexName",
  column_config = list(Term = list(col = "Term", agg = "concat"), Annotated = list(col =
    "Annotated", agg = "mean"), Significant = list(col = "Significant", agg = "mean"),
    RichFactor = list(col = "RichFactor", agg = "max"), FoldEnrichment = list(col =
    "FoldEnrichment", agg = "max"), zscore = list(col = "zscore", agg = "max"), Pvalue =
    list(col = "Pvalue", agg = "min"), Padj = list(col = "Padj", agg = "min")),
  join_method = c("inner", "left"),
  fisher_alternative = c("two.sided", "greater", "less"),
  include_unmatched = TRUE,
  adjust_p = TRUE,
  p_adjust_method = "BH",
  verbose = FALSE
)
}
\arguments{
\item{enrich_data}{Either a vector of GO IDs or a data frame containing enrichment
analysis results. If a data frame, it must contain GO ID and gene identifier columns.}

\item{species}{A character string specifying the species ("human" or "mouse").}

\item{ontology_type}{A character string specifying the GO ontology type ("BP", "CC", or "MF").
BP: Biological Process, CC: Cellular Component, MF: Molecular Function.}

\item{gene_delim}{Character string for splitting gene lists. Default: ",".}

\item{enrich_go_col}{Column name for GO IDs in enrich_data. Default: "Annot".}

\item{enrich_gene_col}{Column name for genes in enrich_data. Default: "GeneID".}

\item{merged_go_col}{Column name for GO IDs in complex data. Default: "functions_go_id".}

\item{merged_gene_col}{Column name for genes in complex data. Default: "subunits_gene_name".}

\item{merged_complex_col}{Column name for complex names. Default: "ComplexName".}

\item{column_config}{List defining column aggregation rules. Each element should contain:
\itemize{
  \item col: Column name to aggregate
  \item agg: Aggregation method ("mean", "max", "min", "sum", or "concat")
}}

\item{join_method}{Join type for combining enrichment and complex data ("inner" or "left").
Default: "inner".}

\item{fisher_alternative}{Alternative hypothesis for Fisher's exact test
("two.sided", "greater", or "less"). Default: "two.sided".}

\item{include_unmatched}{Include entries without complex matches. Default: TRUE.}

\item{adjust_p}{Perform multiple testing correction. Default: TRUE.}

\item{p_adjust_method}{Method for p-value adjustment (see ?p.adjust). Default: "BH".}

\item{verbose}{Print progress messages. Default: FALSE.}
}
\value{
A list containing two data frames:
\describe{
  \item{summary}{Aggregated results per complex including:
    \itemize{
      \item ComplexName: Name of the protein complex
      \item GO_ids: Matched GO term IDs
      \item Matches: Number of matching GO terms
      \item Background: Total GO terms for the complex
      \item Ratio: Matches/Background ratio
      \item P_Com: Fisher's exact test p-value
      \item adj_P_Com: Adjusted p-value (if adjust_p=TRUE)
      \item Additional columns based on column_config
    }
  }
  \item{matchedAnnot}{Detailed matching records between enrichment and complex data}
}

a list include summary and matchedAnnot data.frame
}
\description{
Integrates enrichment analysis results with protein complex annotations to identify
significantly enriched functional groups within protein complexes. The function supports
both simple GO ID lists and detailed enrichment analysis results as input.
}
\note{
- The function automatically loads appropriate complex data based on species
- For table mode, gene lists in enrich_gene_col are automatically split
- P-values are calculated using Fisher's exact test
- Multiple testing correction is applied across all complexes when adjust_p=TRUE
}
\examples{
\dontrun{
# Vector mode - using GO IDs only
go_vector <- c("GO:0006915", "GO:0012501")
result1 <- clusterComplex(go_vector, 
                         species = "human",
                         ontology_type = "BP")

# Table mode - using enrichment results
enrich_df <- data.frame(
  Annot = c("GO:0006915", "GO:0012501"),
  GeneID = c("CASP3,BCL2", "CASP3,BAX"),
  Pvalue = c(0.001, 0.002)
)
result2 <- clusterComplex(enrich_df,
                         species = "mouse",
                         ontology_type = "BP",
                         verbose = TRUE)
}

}
\seealso{
\code{\link[stats]{fisher.test}} for Fisher's exact test details
\code{\link[stats]{p.adjust}} for p-value adjustment methods
}
