// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// wang_similarity
NumericMatrix wang_similarity(S4 otr, IntegerVector nodes, NumericVector contribution, bool correct);
RcppExport SEXP _simAnn_wang_similarity(SEXP otrSEXP, SEXP nodesSEXP, SEXP contributionSEXP, SEXP correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type otr(otrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type contribution(contributionSEXP);
    Rcpp::traits::input_parameter< bool >::type correct(correctSEXP);
    rcpp_result_gen = Rcpp::wrap(wang_similarity(otr, nodes, contribution, correct));
    return rcpp_result_gen;
END_RCPP
}
// wang_similarity_sv
NumericMatrix wang_similarity_sv(const NumericMatrix& sv);
RcppExport SEXP _simAnn_wang_similarity_sv(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type sv(svSEXP);
    rcpp_result_gen = Rcpp::wrap(wang_similarity_sv(sv));
    return rcpp_result_gen;
END_RCPP
}
// clusterSimilarTermsCPP
List clusterSimilarTermsCPP(SEXP sim_matrix, const IntegerVector& terms_vec, const List& parentMap, const CharacterVector& termNames, const NumericVector& icScores, const List& annotationsList, const CharacterVector& annotationsNames, const double threshold);
RcppExport SEXP _simAnn_clusterSimilarTermsCPP(SEXP sim_matrixSEXP, SEXP terms_vecSEXP, SEXP parentMapSEXP, SEXP termNamesSEXP, SEXP icScoresSEXP, SEXP annotationsListSEXP, SEXP annotationsNamesSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_matrix(sim_matrixSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type terms_vec(terms_vecSEXP);
    Rcpp::traits::input_parameter< const List& >::type parentMap(parentMapSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type termNames(termNamesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type icScores(icScoresSEXP);
    Rcpp::traits::input_parameter< const List& >::type annotationsList(annotationsListSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type annotationsNames(annotationsNamesSEXP);
    Rcpp::traits::input_parameter< const double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(clusterSimilarTermsCPP(sim_matrix, terms_vec, parentMap, termNames, icScores, annotationsList, annotationsNames, threshold));
    return rcpp_result_gen;
END_RCPP
}
// trim
std::string trim(const std::string& s);
RcppExport SEXP _simAnn_trim(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(trim(s));
    return rcpp_result_gen;
END_RCPP
}
// splitString
std::vector<std::string> splitString(const std::string& s, char delim);
RcppExport SEXP _simAnn_splitString(SEXP sSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type s(sSEXP);
    Rcpp::traits::input_parameter< char >::type delim(delimSEXP);
    rcpp_result_gen = Rcpp::wrap(splitString(s, delim));
    return rcpp_result_gen;
END_RCPP
}
// unionChar
CharacterVector unionChar(const CharacterVector& v1, const CharacterVector& v2);
RcppExport SEXP _simAnn_unionChar(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(unionChar(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// updateAnnotations
S4 updateAnnotations(S4 tree, SEXP new_annot, bool use_background);
RcppExport SEXP _simAnn_updateAnnotations(SEXP treeSEXP, SEXP new_annotSEXP, SEXP use_backgroundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type new_annot(new_annotSEXP);
    Rcpp::traits::input_parameter< bool >::type use_background(use_backgroundSEXP);
    rcpp_result_gen = Rcpp::wrap(updateAnnotations(tree, new_annot, use_background));
    return rcpp_result_gen;
END_RCPP
}
// calculateNodeDepths
IntegerVector calculateNodeDepths(S4 tree);
RcppExport SEXP _simAnn_calculateNodeDepths(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateNodeDepths(tree));
    return rcpp_result_gen;
END_RCPP
}
// calculateUniversalIC
NumericVector calculateUniversalIC(S4 tree, bool verbose);
RcppExport SEXP _simAnn_calculateUniversalIC(SEXP treeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateUniversalIC(tree, verbose));
    return rcpp_result_gen;
END_RCPP
}
// getTermAnnotations
IntegerMatrix getTermAnnotations(S4 otr, IntegerVector nodes);
RcppExport SEXP _simAnn_getTermAnnotations(SEXP otrSEXP, SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type otr(otrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(getTermAnnotations(otr, nodes));
    return rcpp_result_gen;
END_RCPP
}
// cross_min
NumericMatrix cross_min(const NumericVector& x);
RcppExport SEXP _simAnn_cross_min(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cross_min(x));
    return rcpp_result_gen;
END_RCPP
}
// countOffspring
IntegerVector countOffspring(S4 tree, bool includeSelf);
RcppExport SEXP _simAnn_countOffspring(SEXP treeSEXP, SEXP includeSelfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< bool >::type includeSelf(includeSelfSEXP);
    rcpp_result_gen = Rcpp::wrap(countOffspring(tree, includeSelf));
    return rcpp_result_gen;
END_RCPP
}
// calculateOffspringIC
NumericVector calculateOffspringIC(S4 tree, bool verbose);
RcppExport SEXP _simAnn_calculateOffspringIC(SEXP treeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateOffspringIC(tree, verbose));
    return rcpp_result_gen;
END_RCPP
}
// calculateIC
NumericVector calculateIC(S4 tree, std::string method, bool useCache, bool verbose);
RcppExport SEXP _simAnn_calculateIC(SEXP treeSEXP, SEXP methodSEXP, SEXP useCacheSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type useCache(useCacheSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateIC(tree, method, useCache, verbose));
    return rcpp_result_gen;
END_RCPP
}
// calculateUniversal
NumericVector calculateUniversal(S4 tree, bool useCache, bool verbose);
RcppExport SEXP _simAnn_calculateUniversal(SEXP treeSEXP, SEXP useCacheSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< bool >::type useCache(useCacheSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateUniversal(tree, useCache, verbose));
    return rcpp_result_gen;
END_RCPP
}
// calculateOffspring
NumericVector calculateOffspring(S4 tree, bool useCache, bool verbose);
RcppExport SEXP _simAnn_calculateOffspring(SEXP treeSEXP, SEXP useCacheSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< bool >::type useCache(useCacheSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateOffspring(tree, useCache, verbose));
    return rcpp_result_gen;
END_RCPP
}
// countAnnotations
IntegerVector countAnnotations(S4 tree, bool unify);
RcppExport SEXP _simAnn_countAnnotations(SEXP treeSEXP, SEXP unifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< bool >::type unify(unifySEXP);
    rcpp_result_gen = Rcpp::wrap(countAnnotations(tree, unify));
    return rcpp_result_gen;
END_RCPP
}
// getLongestDistToOffspring
IntegerVector getLongestDistToOffspring(S4 tree, IntegerVector fromNodes, LogicalVector backgroundNodes);
RcppExport SEXP _simAnn_getLongestDistToOffspring(SEXP treeSEXP, SEXP fromNodesSEXP, SEXP backgroundNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type fromNodes(fromNodesSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type backgroundNodes(backgroundNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(getLongestDistToOffspring(tree, fromNodes, backgroundNodes));
    return rcpp_result_gen;
END_RCPP
}
// getShortestDistToOffspring
IntegerVector getShortestDistToOffspring(S4 tree, IntegerVector fromNodes, LogicalVector backgroundNodes);
RcppExport SEXP _simAnn_getShortestDistToOffspring(SEXP treeSEXP, SEXP fromNodesSEXP, SEXP backgroundNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type fromNodes(fromNodesSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type backgroundNodes(backgroundNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(getShortestDistToOffspring(tree, fromNodes, backgroundNodes));
    return rcpp_result_gen;
END_RCPP
}
// getGroupAncestors
IntegerVector getGroupAncestors(S4 tree, IntegerVector nodes, int type, bool includeSelf);
RcppExport SEXP _simAnn_getGroupAncestors(SEXP treeSEXP, SEXP nodesSEXP, SEXP typeSEXP, SEXP includeSelfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type includeSelf(includeSelfSEXP);
    rcpp_result_gen = Rcpp::wrap(getGroupAncestors(tree, nodes, type, includeSelf));
    return rcpp_result_gen;
END_RCPP
}
// findMaxAncestorID
IntegerMatrix findMaxAncestorID(S4 tree, IntegerVector nodes, NumericVector values, bool useLongestPath);
RcppExport SEXP _simAnn_findMaxAncestorID(SEXP treeSEXP, SEXP nodesSEXP, SEXP valuesSEXP, SEXP useLongestPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type useLongestPath(useLongestPathSEXP);
    rcpp_result_gen = Rcpp::wrap(findMaxAncestorID(tree, nodes, values, useLongestPath));
    return rcpp_result_gen;
END_RCPP
}
// findMaxAncestorValues
NumericMatrix findMaxAncestorValues(S4 tree, IntegerVector nodes, NumericVector values);
RcppExport SEXP _simAnn_findMaxAncestorValues(SEXP treeSEXP, SEXP nodesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(findMaxAncestorValues(tree, nodes, values));
    return rcpp_result_gen;
END_RCPP
}
// calculateAncestorSimilarity
NumericMatrix calculateAncestorSimilarity(S4 tree, IntegerVector termIds);
RcppExport SEXP _simAnn_calculateAncestorSimilarity(SEXP treeSEXP, SEXP termIdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type termIds(termIdsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateAncestorSimilarity(tree, termIds));
    return rcpp_result_gen;
END_RCPP
}
// calculateWangIC
NumericVector calculateWangIC(S4 tree, NumericVector contribution);
RcppExport SEXP _simAnn_calculateWangIC(SEXP treeSEXP, SEXP contributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type contribution(contributionSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateWangIC(tree, contribution));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simAnn_wang_similarity", (DL_FUNC) &_simAnn_wang_similarity, 4},
    {"_simAnn_wang_similarity_sv", (DL_FUNC) &_simAnn_wang_similarity_sv, 1},
    {"_simAnn_clusterSimilarTermsCPP", (DL_FUNC) &_simAnn_clusterSimilarTermsCPP, 8},
    {"_simAnn_trim", (DL_FUNC) &_simAnn_trim, 1},
    {"_simAnn_splitString", (DL_FUNC) &_simAnn_splitString, 2},
    {"_simAnn_unionChar", (DL_FUNC) &_simAnn_unionChar, 2},
    {"_simAnn_updateAnnotations", (DL_FUNC) &_simAnn_updateAnnotations, 3},
    {"_simAnn_calculateNodeDepths", (DL_FUNC) &_simAnn_calculateNodeDepths, 1},
    {"_simAnn_calculateUniversalIC", (DL_FUNC) &_simAnn_calculateUniversalIC, 2},
    {"_simAnn_getTermAnnotations", (DL_FUNC) &_simAnn_getTermAnnotations, 2},
    {"_simAnn_cross_min", (DL_FUNC) &_simAnn_cross_min, 1},
    {"_simAnn_countOffspring", (DL_FUNC) &_simAnn_countOffspring, 2},
    {"_simAnn_calculateOffspringIC", (DL_FUNC) &_simAnn_calculateOffspringIC, 2},
    {"_simAnn_calculateIC", (DL_FUNC) &_simAnn_calculateIC, 4},
    {"_simAnn_calculateUniversal", (DL_FUNC) &_simAnn_calculateUniversal, 3},
    {"_simAnn_calculateOffspring", (DL_FUNC) &_simAnn_calculateOffspring, 3},
    {"_simAnn_countAnnotations", (DL_FUNC) &_simAnn_countAnnotations, 2},
    {"_simAnn_getLongestDistToOffspring", (DL_FUNC) &_simAnn_getLongestDistToOffspring, 3},
    {"_simAnn_getShortestDistToOffspring", (DL_FUNC) &_simAnn_getShortestDistToOffspring, 3},
    {"_simAnn_getGroupAncestors", (DL_FUNC) &_simAnn_getGroupAncestors, 4},
    {"_simAnn_findMaxAncestorID", (DL_FUNC) &_simAnn_findMaxAncestorID, 4},
    {"_simAnn_findMaxAncestorValues", (DL_FUNC) &_simAnn_findMaxAncestorValues, 3},
    {"_simAnn_calculateAncestorSimilarity", (DL_FUNC) &_simAnn_calculateAncestorSimilarity, 2},
    {"_simAnn_calculateWangIC", (DL_FUNC) &_simAnn_calculateWangIC, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_simAnn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
